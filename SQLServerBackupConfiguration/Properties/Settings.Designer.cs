//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SQLServerBackupConfiguration.Properties {
    
    
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "11.0.0.0")]
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute(" DEclare  @TT table ([taxt] Nvarchar(512));\r\n \r\n--GO\r\n--CREATE PROCEDURE sp_help_" +
            "revlogin \r\nDECLARE @login_name sysname = NULL\r\nDECLARE @name sysname\r\nDECLARE @t" +
            "ype varchar (1)\r\nDECLARE @hasaccess int\r\nDECLARE @denylogin int\r\nDECLARE @is_dis" +
            "abled int\r\nDECLARE @PWD_varbinary  varbinary (256)\r\nDECLARE @PWD_string  varchar" +
            " (514)\r\nDECLARE @SID_varbinary varbinary (85)\r\nDECLARE @SID_string varchar (514)" +
            "\r\nDECLARE @tmpstr  varchar (1024)\r\nDECLARE @is_policy_checked varchar (3)\r\nDECLA" +
            "RE @is_expiration_checked varchar (3)\r\n\r\nDECLARE @defaultdb sysname\r\n \r\nIF (@log" +
            "in_name IS NULL)\r\n  DECLARE login_curs CURSOR FOR\r\n\r\n      SELECT p.sid, p.name," +
            " p.type, p.is_disabled, p.default_database_name, l.hasaccess, l.denylogin FROM \r" +
            "\nsys.server_principals p LEFT JOIN sys.syslogins l\r\n      ON ( l.name = p.name )" +
            " WHERE p.type IN ( \'S\', \'G\', \'U\' ) --AND p.name <> \'sa\'\r\nELSE\r\n  DECLARE login_c" +
            "urs CURSOR FOR\r\n\r\n\r\n      SELECT p.sid, p.name, p.type, p.is_disabled, p.default" +
            "_database_name, l.hasaccess, l.denylogin FROM \r\nsys.server_principals p LEFT JOI" +
            "N sys.syslogins l\r\n      ON ( l.name = p.name ) WHERE p.type IN ( \'S\', \'G\', \'U\' " +
            ") AND p.name = @login_name\r\nOPEN login_curs\r\n\r\nFETCH NEXT FROM login_curs INTO @" +
            "SID_varbinary, @name, @type, @is_disabled, @defaultdb, @hasaccess, @denylogin\r\nI" +
            "F (@@fetch_status = -1)\r\nBEGIN\r\n  PRINT \'No login(s) found.\'\r\n  CLOSE login_curs" +
            "\r\n  DEALLOCATE login_curs\r\n \r\nEND\r\nSET @tmpstr = \'/* sp_help_revlogin script \'\r\n" +
            "insert into @TT  values (@tmpstr);\r\nSET @tmpstr = \'** Generated \' + CONVERT (var" +
            "char, GETDATE()) + \' on \' + @@SERVERNAME + \' */\'\r\ninsert into @TT  values (\'USE " +
            "[master];\');\r\ninsert into @TT  values (\'\');\r\ninsert into @TT  values (@tmpstr);\r" +
            "\nPRINT \'\'\r\nWHILE (@@fetch_status <> -1)\r\nBEGIN\r\n  IF (@@fetch_status <> -2)\r\n  B" +
            "EGIN\r\n    PRINT \'\'\r\n    SET @tmpstr = \'-- Login: \' + @name\r\n    insert into @TT " +
            " values (@tmpstr);\r\n    IF (@type IN ( \'G\', \'U\'))\r\n    BEGIN -- NT authenticated" +
            " account/group\r\n\r\n      SET @tmpstr = \'CREATE LOGIN \' + QUOTENAME( @name ) + \' F" +
            "ROM WINDOWS WITH DEFAULT_DATABASE = [\' + @defaultdb + \']\'\r\n    END\r\n    ELSE BEG" +
            "IN -- SQL Server authentication\r\n        -- obtain password and sid\r\n           " +
            " SET @PWD_varbinary = CAST( LOGINPROPERTY( @name, \'PasswordHash\' ) AS varbinary " +
            "(256) )\r\n        EXEC sp_hexadecimal @PWD_varbinary, @PWD_string OUT\r\n        EX" +
            "EC sp_hexadecimal @SID_varbinary,@SID_string OUT\r\n \r\n        -- obtain password " +
            "policy state\r\n        SELECT @is_policy_checked = CASE is_policy_checked WHEN 1 " +
            "THEN \'ON\' WHEN 0 THEN \'OFF\' ELSE NULL END FROM sys.sql_logins WHERE name = @name" +
            "\r\n        SELECT @is_expiration_checked = CASE is_expiration_checked WHEN 1 THEN" +
            " \'ON\' WHEN 0 THEN \'OFF\' ELSE NULL END FROM sys.sql_logins WHERE name = @name\r\n \r" +
            "\n            SET @tmpstr = \'CREATE LOGIN \' + QUOTENAME( @name ) + \' WITH PASSWOR" +
            "D = \' + @PWD_string + \' HASHED, SID = \' + @SID_string + \', DEFAULT_DATABASE = [\'" +
            " + @defaultdb + \']\'\r\n\r\n        IF ( @is_policy_checked IS NOT NULL )\r\n        BE" +
            "GIN\r\n          SET @tmpstr = @tmpstr + \', CHECK_POLICY = \' + @is_policy_checked\r" +
            "\n        END\r\n        IF ( @is_expiration_checked IS NOT NULL )\r\n        BEGIN\r\n" +
            "          SET @tmpstr = @tmpstr + \', CHECK_EXPIRATION = \' + @is_expiration_check" +
            "ed\r\n        END\r\n    END\r\n    IF (@denylogin = 1)\r\n    BEGIN -- login is denied " +
            "access\r\n      SET @tmpstr = @tmpstr + \'; DENY CONNECT SQL TO \' + QUOTENAME( @nam" +
            "e )\r\n    END\r\n    ELSE IF (@hasaccess = 0)\r\n    BEGIN -- login exists but does n" +
            "ot have access\r\n      SET @tmpstr = @tmpstr + \'; REVOKE CONNECT SQL TO \' + QUOTE" +
            "NAME( @name )\r\n    END\r\n    IF (@is_disabled = 1)\r\n    BEGIN -- login is disable" +
            "d\r\n      SET @tmpstr = @tmpstr + \'; ALTER LOGIN \' + QUOTENAME( @name ) + \' DISAB" +
            "LE\'\r\n    END\r\n    insert into @TT  values (@tmpstr);\r\n  END\r\n\r\n  FETCH NEXT FROM" +
            " login_curs INTO @SID_varbinary, @name, @type, @is_disabled, @defaultdb, @hasacc" +
            "ess, @denylogin\r\n   END\r\nCLOSE login_curs\r\nDEALLOCATE login_curs\r\nselect * from " +
            "@TT;\r\n")]
        public string CaptureLoginScripts {
            get {
                return ((string)(this["CaptureLoginScripts"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("C:\\ConfigBackup\\")]
        public string DefualtStorePath {
            get {
                return ((string)(this["DefualtStorePath"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("{SERVERNAME}\\{DATE}\\")]
        public string DefualtStoreFormat {
            get {
                return ((string)(this["DefualtStoreFormat"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Trusted_Connection=True;")]
        public string DefualtAuthnticationConnectionString {
            get {
                return ((string)(this["DefualtAuthnticationConnectionString"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute(".")]
        public string DefualtServerConnectionString {
            get {
                return ((string)(this["DefualtServerConnectionString"]));
            }
        }
    }
}
